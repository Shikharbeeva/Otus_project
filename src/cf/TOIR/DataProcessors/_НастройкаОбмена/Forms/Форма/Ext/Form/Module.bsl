&НаКлиенте
Перем Клиент, АдресВоВременномХранилище;
#Область ПодключениеИнициализацияКомпоненты

&НаКлиенте
Процедура ПодключитьКомпонентуКлиент(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
	
	УстановитьВнешнююКомпоненту(АдресВоВременномХранилище);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаСервере
Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("ВнешняяКомпонентаRMQ"));
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКомпонентуКлиент()
	
	Если Клиент = Неопределено Тогда
		Если Не ИнициализироватьКомпонентуКлиентСервер(Клиент) Тогда
			
			ПодключитьКомпонентуКлиент();
			ИнициализироватьКомпонентуКлиентСервер(Клиент);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Клиент;
КонецФункции

&НаСервере
Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СозданиеТочкиИОчереди(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		СозданиеТочкиИОчередиКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		СозданиеТочкиИОчередиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеТочкиИОчередиКлиент()
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент();
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Этаформа);
	
КонецПроцедуры

&НаСервере
Процедура СозданиеТочкиИОчередиСервер()
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ПроверитьПодключениеСервер();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКлиент()
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент();
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеСервер()
	
	КлиентКомпоненты = _ОбменMDM.ПолучитьКомпонентуСервер();
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

#Область СлужебныеПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = РеквизитФормыВЗначение("Объект").ПолучитьМакет("PinkRabbitMQ");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботаСRabbitMQ

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
				Форма.Адрес,
				Форма.Порт,
				Форма.Логин,
				Форма.Пароль,
				Форма.ВиртуальныйХост);
			Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
			
		ТочкаОбмена = Форма.ТочкаОбмена;
		ИмяОчереди  = Форма.ИмяОчереди;
		
		КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Точки и очереди успешно созданы!");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонстантуНаСервере()
СтруктураЗначений = Новый Структура();
СтруктураЗначений.Вставить("Адрес",Адрес);
СтруктураЗначений.Вставить("Порт", Порт);
СтруктураЗначений.Вставить("Логин", Логин);
СтруктураЗначений.Вставить("Пароль", Пароль);
СтруктураЗначений.Вставить("ВиртуальныйХост",ВиртуальныйХост); 
//Передача
СтруктураЗначений.Вставить("ТочкаОбменаДок",ТочкаОбмена);
СтруктураЗначений.Вставить("ИмяОчередиДокВых", ИмяОчереди);
СтруктураЗначений.Вставить("КлючМаршрутизацииДок",КлючМаршрутизации);   
//Прием
СтруктураЗначений.Вставить("ИмяОчередиДокВх", ИмяОчередиВх);
//Номенклатура
СтруктураЗначений.Вставить("ТочкаОбменаНоменклатура",ТочкаОбмена2);
СтруктураЗначений.Вставить("ИмяОчередиНоменклатура", ИмяОчереди2);


ХранилищеДанных = Новый ХранилищеЗначения(СтруктураЗначений);
Константы._НастройкиОбменаRMQ.Установить(ХранилищеДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКонстанту(Команда)
	ЗаписатьКонстантуНаСервере();
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
СохДанные=Константы._НастройкиОбменаRMQ.Получить().Получить();
Если Не СохДанные=Неопределено тогда
	Адрес=СохДанные.Адрес;
	Порт=СохДанные.Порт;
	Логин=СохДанные.Логин;
	Пароль=СохДанные.Пароль;
	ВиртуальныйХост=СохДанные.ВиртуальныйХост;
	ТочкаОбмена=СохДанные.ТочкаОбменаДок;
	ИмяОчереди=СохДанные.ИмяОчередиДокВых;
	КлючМаршрутизации=СохДанные.КлючМаршрутизацииДок; 
	ТочкаОбмена2=СохДанные.ТочкаОбменаНоменклатура;
	ИмяОчереди2=СохДанные.ИмяОчередиНоменклатура;
	ИмяОчередиВх=СохДанные.ИмяОчередиДокВх;
	
КонецЕсли;	
КонецПроцедуры
