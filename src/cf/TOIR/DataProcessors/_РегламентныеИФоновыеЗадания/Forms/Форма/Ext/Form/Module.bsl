
//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ОПРЕДЕЛЕНИЕ ПАРАМЕТРОВ ЗАПУСКА
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ИмяМетаданных = ОбработкаОбъект.Метаданные().ПолноеИмя();
	Заголовок = ОбработкаОбъект.Наименование + " (версия " + ОбработкаОбъект.Версия + ")";;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
	ИмяCOMСоединителя = "v" + СтрЗаменить(ВерсияПлатформы, ".", "") + ".COMConnector";
	
	Если ВерсияПлатформы = "8.3"
		Или ВерсияПлатформы = "8.4" Тогда
		
		Попытка
			
			Элементы.ВидОтбораПоПериоду.КнопкаВыпадающегоСписка				= Ложь;
			Элементы.ОтборПоРегламентномуЗаданию.КнопкаВыпадающегоСписка	= Ложь;
			Элементы.ОтборПоВидуЗадания.КнопкаВыпадающегоСписка				= Ложь;
			
		Исключение
		    
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИдентификаторЗаданияДляИстории) Тогда
		
		ИдентификаторЗаданияДляИстории = Параметры.ИдентификаторЗаданияДляИстории;
		Элементы.ОтборПоРегламентномуЗаданию.СписокВыбора.Добавить(Строка(ИдентификаторЗаданияДляИстории), Параметры.ИмяЗаданияДляИстории);
		
	КонецЕсли;
	
	Если ИнформационнаяБазаФайловая() Тогда
		
		Элементы.ГруппаСостояниеИспользованияРегламентныхЗаданий.Видимость	= Ложь;
		ОбновлятьСостояниеИспользованияРегламентныхЗаданийПриЗапуске		= Ложь;
		
	КонецЕсли;
	
	// СПИСОК ПЕРИОДОВ
	Элементы.ВидОтбораПоПериоду.СписокВыбора.Добавить(ВариантСтандартногоПериода.Сегодня);
	Элементы.ВидОтбораПоПериоду.СписокВыбора.Добавить(ВариантСтандартногоПериода.Вчера);
	Элементы.ВидОтбораПоПериоду.СписокВыбора.Добавить("ВсеВремя", "Все время");
	Элементы.ВидОтбораПоПериоду.СписокВыбора.Добавить(ВариантСтандартногоПериода.ПроизвольныйПериод);
	
	// СПИСОК ВИДОВ ЗАДАНИЙ
	Для каждого МетаданныеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		НоваяСтрока = ВидыРегламентныхЗаданий.Добавить();
		НоваяСтрока.ВидЗадания		= МетаданныеЗадание.Имя;
		НоваяСтрока.Наименование	= МетаданныеЗадание.Представление();
		
		Элементы.ОтборПоВидуЗадания.СписокВыбора.Добавить(НоваяСтрока.ВидЗадания, НоваяСтрока.Наименование);
		
	КонецЦикла;
	
	ВидыРегламентныхЗаданий.Сортировать("Наименование");
	
	// ПАРАМЕТРЫ ПО УМОЛЧАНИЮ
	// Регламентные задания
	ГруппироватьПоВидуЗадания						= Истина;
	ЗадержкаПриОбновленииСпискаРегламентныхЗаданий	= 0.5;
	
	// Фоновые задания
	АнализироватьРегламентныеЗадания					= Истина;
	ОтборПоСостояниюФоновогоЗаданияЗавершено			= Истина;
	ОтборПоСостояниюФоновогоЗаданияЗавершеноАварийно	= Истина;
	ОтборПоСостояниюФоновогоЗаданияОтменено				= Истина;
	ОтборПоСостояниюФоновогоЗаданияАктивно				= Истина;
	ВидОтбораПоПериоду									= ВариантСтандартногоПериода.Сегодня;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВидОтбораПоПериоду = Настройки["ВидОтбораПоПериоду"];
	
	Если Не ЗначениеЗаполнено(ВидОтбораПоПериоду) Тогда
		
		ВидОтбораПоПериоду = ВариантСтандартногоПериода.Сегодня;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Параметры.ОтборЗаданийПоВидуЗадания) Тогда
		
		// Сохраним текущие значения, чтобы восстановить их при сохранении настроек.
		// Это необходмо для того, чтобы не изменять текущие настройки.
		ОтборПоСостояниюРегламентногоЗаданияТекущее = ОтборПоСостояниюРегламентногоЗадания;
		ГруппироватьПоВидуЗаданияТекущее = ГруппироватьПоВидуЗадания;
		
		ОтборПоСостояниюРегламентногоЗадания = 0;
		ГруппироватьПоВидуЗадания = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияДляИстории) Тогда
		
		ОтбиратьПоРегламентномуЗаданию	= Истина;
		ОтбиратьПоВидуЗадания			= Ложь;
		ОтборПоРегламентномуЗаданию		= Строка(ИдентификаторЗаданияДляИстории);
		
		ОбновитьФоновыеЗаданияНаСервере();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФоновыеЗадания;
		
	Иначе
		
		ОбновитьСписокРегламентныхЗаданий();
		
	КонецЕсли;
	
	Если ОбновлятьСостояниеИспользованияРегламентныхЗаданийПриЗапуске Тогда
		
		Попытка
			
			ОбновитьСостояниеИспользованияРегламентныхЗаданий(Неопределено);
			
		Исключение
		    
		КонецПопытки;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Событие") Тогда
		
		Если ВыбранноеЗначение.Событие = "НастройкаПараметровАдминистрирования" Тогда
			
			СтандартнаяОбработка = Ложь;
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение.НовыеЗначения);
			
		ИначеЕсли ВыбранноеЗначение.Событие = "НастройкаПараметровОбработки" Тогда
			
			СтандартнаяОбработка = Ложь;
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение.НовыеЗначения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПоискРегламентногоЗаданияВСписке"
		И ТипЗнч(Источник) = Тип("Строка")
		И Найти(Источник, "бук_РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание") > 0 Тогда
		
		НайтиРегламентноеЗаданиеВСписке(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Не СохранятьПароли Тогда
		
		Настройки.Вставить("ПарольАдминистратораИнформационнойБазы"	, "");
		Настройки.Вставить("ПарольАдминистратораКластера"			, "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОтборЗаданийПоВидуЗадания) Тогда
		
		// Восстановим значения, которые были при открытии формы.
		Настройки.Вставить("ОтборПоСостояниюРегламентногоЗадания"	, ОтборПоСостояниюРегламентногоЗаданияТекущее);
		Настройки.Вставить("ГруппироватьПоВидуЗадания"				, ГруппироватьПоВидуЗаданияТекущее);
		
	КонецЕсли;
	
	// На всякий случай проверим список избранного на наличие дублей.
	ИзбранныеЗаданияСоответствие = Новый Соответствие;
	
	Для каждого ЭлементСписка Из ИзбранныеЗадания Цикл
		
		ИзбранныеЗаданияСоответствие.Вставить(ЭлементСписка.Значение);
		
	КонецЦикла;
	
	ИзбранныеЗадания.Очистить();
	
	Для каждого ЭлементСписка Из ИзбранныеЗаданияСоответствие Цикл
		
		ИзбранныеЗадания.Добавить(ЭлементСписка.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательные функции


//////////////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура НастройкиОбработки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ТекущиеЗначения = Новый Структура("ЗадержкаПриОбновленииСпискаРегламентныхЗаданий");
	ЗаполнитьЗначенияСвойств(ТекущиеЗначения, ЭтаФорма);
	ПараметрыФормы.Вставить("ТекущиеЗначения", ТекущиеЗначения);
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.НастройкиОбработки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// Вспомогательные функции


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


// Вспомогательные функции


//////////////////////////////////////////////////////////////////////////////////////////
// ГРУППА "ГруппаСостояниеИспользованияРегламентныхЗаданий"

// Команды

&НаКлиенте
Процедура НастроитьПараметрыАдминистрирования(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущиеЗначения", ПараметрыАдминистрирования());
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.ПараметрыАдминистрирования", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеИспользованияРегламентныхЗаданий(Команда)
	
	СостояниеИспользованияРегламентныхЗаданий = 0;
	ПараметрыАдминистрирования = ПараметрыАдминистрирования();
	
	Если ВыполнятьОперацииАдминистрированияНаСервере Тогда
		
		БлокировкаУстановлена = СостояниеБлокировкиРегламентныхЗаданийИнформационнойБазыНаСервере(ПараметрыАдминистрирования);
		
	Иначе
		
		БлокировкаУстановлена = СостояниеБлокировкиРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования);
		
	КонецЕсли;
	
	ОпределитьСостояниеИспользованияРегламентныхЗаданий(БлокировкаУстановлена);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьИспользованиеРегламентныхЗаданий(Команда)
	
	Если СостояниеИспользованияРегламентныхЗаданий = 1 Тогда
		
		НовоеЗначение = Истина;
		
	ИначеЕсли СостояниеИспользованияРегламентныхЗаданий = 2 Тогда
		
		НовоеЗначение = Ложь;
		
	КонецЕсли;
	
	ПараметрыАдминистрирования = ПараметрыАдминистрирования();
	
	Если ВыполнятьОперацииАдминистрированияНаСервере Тогда
		
		УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазыНаСервере(ПараметрыАдминистрирования, НовоеЗначение);
		
	Иначе
		
		УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования, НовоеЗначение);
		
	КонецЕсли;
	
	ОпределитьСостояниеИспользованияРегламентныхЗаданий(НовоеЗначение);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Вспомогательные функции "НастроитьПараметрыАдминистрирования"

&НаКлиенте
Функция ПараметрыАдминистрирования()
	
	ПараметрыАдминистрирования = Новый Структура("АдресАгентаСервера, ВыполнятьОперацииАдминистрированияНаСервере, ИмяCOMСоединителя, ИмяАдминистратораИнформационнойБазы, ИмяАдминистратораКластера, ИмяИнформационнойБазы, ОбновлятьСостояниеИспользованияРегламентныхЗаданийПриЗапуске, ПарольАдминистратораИнформационнойБазы, ПарольАдминистратораКластера, ПортАгентаСервера, ПортМенеджераКластера, СохранятьПароли");
	ЗаполнитьЗначенияСвойств(ПараметрыАдминистрирования, ЭтаФорма);
	
	Возврат ПараметрыАдминистрирования;
	
КонецФункции

// Вспомогательные функции "СостояниеБлокировкиРегламентныхЗаданийИнформационнойБазы"

&НаСервереБезКонтекста
Функция СостояниеБлокировкиРегламентныхЗаданийИнформационнойБазыНаСервере(ПараметрыАдминистрирования)
	
	Возврат СостояниеБлокировкиРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования);
	
КонецФункции

// Вспомогательные функции "ВключитьВыключитьИспользованиеРегламентныхЗаданий"

&НаСервереБезКонтекста
Процедура УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазыНаСервере(ПараметрыАдминистрирования, НовоеЗначени)
	
	УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования, НовоеЗначени);
	
КонецПроцедуры

// Вспомогательные функции

&НаКлиенте
Процедура ОпределитьСостояниеИспользованияРегламентныхЗаданий(БлокировкаУстановлена)
	
	Если БлокировкаУстановлена Тогда
		
		СостояниеИспользованияРегламентныхЗаданий = 2;
		
	Иначе
		
		СостояниеИспользованияРегламентныхЗаданий = 1;
		
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ГРУППА "СтраницаРегламентныеЗадания"

// Команды

&НаКлиенте
Процедура ОбновитьРегламентныеЗадания(Команда)
	
	ОбновитьСписокРегламентныхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Расписание = РасписаниеРегламентногоЗадания(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор);
	ДиалогНастройки = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	Если ДиалогНастройки.ОткрытьМодально() Тогда
		
		Расписание = ДиалогНастройки.Расписание;
		УстановитьРасписаниеРегламентногоЗадания(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор, Расписание);
		ОбновитьСписокРегламентныхЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРегламентныхЗаданий(Команда)
	
	Если Не ГруппироватьПоВидуЗадания Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементыДерева = ДеревоРегламентныхЗаданий.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		Если Не Элементы.ДеревоРегламентныхЗаданий.Развернут(ИдентификаторСтроки) Тогда
			
			Элементы.ДеревоРегламентныхЗаданий.Развернуть(ИдентификаторСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьРегламентноеЗадание(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВключитьВыключитьРегламентноеЗаданиеНаСервере(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор);
	ОбновитьСписокРегламентныхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеНепосредственно(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьРегламентноеЗадание(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор);
	ОбновитьСписокРегламентныхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВФоне(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьРегламентноеЗадание(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор, Истина);
	ОбновитьСписокРегламентныхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРегламентноеЗадание(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторЗапускаемогоЗадания = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор;
	РезультатЗапуска = ЗапуститьРегламентноеЗаданиеНаСервере(ИдентификаторЗапускаемогоЗадания);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗапуска);
	ПодключитьОбработчикОжидания("ОбработчикПослеЗапускаРегламентногоЗадания", ЗадержкаПриОбновленииСпискаРегламентныхЗаданий, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРегламентноеЗадание(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтменитьРегламентноеЗаданиеНаСервере(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор) Тогда
		
		ОбновитьСписокРегламентныхЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФоновыеЗадания(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.УникальныйИдентификатор) Тогда
		
		ОтбиратьПоРегламентномуЗаданию	= Истина;
		ОтбиратьПоВидуЗадания			= Ложь;
		ОтборПоРегламентномуЗаданию		= Строка(ТекущиеДанные.УникальныйИдентификатор);
		
	Иначе
		
		Если Не АнализироватьРегламентныеЗадания Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Для поиска фоновых заданий по виду задания необходимо установить флаг ''Анализировать регламентные задания''.'");
			Сообщение.Поле = "АнализироватьРегламентныеЗадания";
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		Если Не РазрешитьПолучениеФоновыхЗаданий() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ОтбиратьПоРегламентномуЗаданию	= Ложь;
		ОтбиратьПоВидуЗадания			= Истина;
		ОтборПоВидуЗадания				= ТекущиеДанные.ВидЗадания;
		
	КонецЕсли;
	
	ОбновитьФоновыеЗаданияНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФоновыеЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоследнееЗадание(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ТекущиеДанные.Выполнялось Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("УникальныйИдентификатор", ТекущиеДанные.ИдентификаторПоследнегоЗадания);
	НайденныеСтроки = ТаблицаФоновыхЗаданий.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОписаниеФоновогоЗадания = ОписаниеФоновогоЗадания(ТекущиеДанные.ИдентификаторПоследнегоЗадания, Элементы.ОтборПоВидуЗадания.СписокВыбора.Скопировать());
		
		Если ОписаниеФоновогоЗадания = Неопределено Тогда
			
			ОписаниеФоновогоЗадания = ШаблонОписанияФоновогоЗадания();
			ЗаполнитьЗначенияСвойств(ОписаниеФоновогоЗадания, ТекущиеДанные, "ВидЗадания, Начало, Конец, Состояние, ИнформацияОбОшибке");
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеФоновогоЗадания = ШаблонОписанияФоновогоЗадания();
		ЗаполнитьЗначенияСвойств(ОписаниеФоновогоЗадания, НайденныеСтроки[0]);
		
	КонецЕсли;
	
	ОткрытьОписаниеФоновогоЗадания(ОписаниеФоновогоЗадания, ТекущиеДанные.ИдентификаторПоследнегоЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьРегламентноеЗаданиеИзИзбранного(Команда)
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные;
	ТекущиеДанные.ИзбранноеЗадание = Не ТекущиеДанные.ИзбранноеЗадание;
	
	ПараметрыОтбора = Новый Структура("УникальныйИдентификатор", ТекущиеДанные.УникальныйИдентификатор);
	НайденныеСтроки = ТаблицаРегламентныхЗаданий.НайтиСтроки(ПараметрыОтбора);
	НайденныеСтроки[0].ИзбранноеЗадание = ТекущиеДанные.ИзбранноеЗадание;
	
	Если ТекущиеДанные.ИзбранноеЗадание Тогда
		
		ИзбранныеЗадания.Добавить(ТекущиеДанные.УникальныйИдентификатор);
		
	Иначе
		
		ЭлементСписка = ИзбранныеЗадания.НайтиПоЗначению(ТекущиеДанные.УникальныйИдентификатор);
		ИзбранныеЗадания.Удалить(ЭлементСписка);
		
	КонецЕсли;
	
	Если ОтборПоСостояниюРегламентногоЗадания = 1 Тогда
		
		ОбновитьСписокРегламентныхЗаданий(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные функции "НастроитьРасписание"

&НаСервереБезКонтекста
Функция РасписаниеРегламентногоЗадания(ИдентификаторЗадания)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат РегламентноеЗадание.Расписание;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, Расписание)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	РегламентноеЗадание.Расписание = Расписание;
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

// Вспомогательные функции "ВключитьВыключитьРегламентноеЗадание"

&НаСервереБезКонтекста
Процедура ВключитьВыключитьРегламентноеЗаданиеНаСервере(ИдентификаторЗадания)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	РегламентноеЗадание.Использование = Не РегламентноеЗадание.Использование;
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

// Вспомогательные функции для выполнения задания

&НаСервереБезКонтекста
Процедура ВыполнитьРегламентноеЗадание(ИдентификаторЗадания, ВФоне = Ложь)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	ИмяМетода = РегламентноеЗадание.Метаданные.ИмяМетода;
	ПараметрыЗадания = РегламентноеЗадание.Параметры;
	
	Если ВФоне Тогда
		
		Наименование = ?(ЗначениеЗаполнено(РегламентноеЗадание.Наименование), РегламентноеЗадание.Наименование, РегламентноеЗадание.Метаданные.Представление());
		ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания, РегламентноеЗадание.Ключ, Наименование);
		
	Иначе
		
		ПараметрыСтрока = "";
		
		Если ПараметрыЗадания <> Неопределено И ПараметрыЗадания.Количество() > 0 Тогда
			
			Для Индекс = 0 По ПараметрыЗадания.ВГраница() Цикл 
				
				ПараметрыСтрока = ПараметрыСтрока + "ПараметрыЗадания[" + Индекс + "],";
				
			КонецЦикла;
			
			ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
			
		КонецЕсли;
		
		Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные функции "ЗапуститьРегламентноеЗадание"

&НаСервереБезКонтекста
// Запускает задание с помощью снятия и установки флага использования.
// В этом случае менеджер регламентных заданий обнулит счетчик запуска
// (кажется, именно так это и работает) и запустит задание самостоятельно.
// 
Функция ЗапуститьРегламентноеЗаданиеНаСервере(ИдентификаторЗадания)
	
	Результат = Новый Структура("ВыключитьЗапускаемоеЗадание, РасписаниеЗапускаемогоЗадания", Ложь, Неопределено);
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Не РегламентноеЗадание.Расписание.ТребуетсяВыполнение() Тогда
		// Если задание сейчас не может быть запущено, то временно заменим расписание.
		
		Результат.РасписаниеЗапускаемогоЗадания = РегламентноеЗадание.Расписание;
		
		РегламентноеЗадание.Расписание = Новый РасписаниеРегламентногоЗадания;
		РегламентноеЗадание.Расписание.ПериодПовтораДней = 1;
		
	КонецЕсли;
	
	Если Не РегламентноеЗадание.Использование Тогда
		// Если у задания флаг использования изначально был снят, то его нужно также снять.
		// Но так как менеджер регламентных заданий не успевает обработать смену признака
		// (если устанавливать и снимать за один серверный вызов),
		// то мы сначала установим флаг, а потом подключим обработчик ожидания
		// на значение ЗадержкаПриОбновленииСпискаРегламентныхЗаданий (по умолчанию 0.5 сек.),
		// который снимет флаг использования.
		
		Результат.ВыключитьЗапускаемоеЗадание = Истина;
		
		РегламентноеЗадание.Использование = Истина;
		
	КонецЕсли;
	
	РегламентноеЗадание.Записать();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикПослеЗапускаРегламентногоЗадания()
	
	Если РасписаниеЗапускаемогоЗадания <> Неопределено
		Или ВыключитьЗапускаемоеЗадание Тогда
		
		ОбработчикПослеЗапускаРегламентногоЗаданияНаСервере(ИдентификаторЗапускаемогоЗадания, РасписаниеЗапускаемогоЗадания, ВыключитьЗапускаемоеЗадание);
		
	КонецЕсли;
	
	ОбновитьСписокРегламентныхЗаданий();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработчикПослеЗапускаРегламентногоЗаданияНаСервере(ИдентификаторЗадания, РасписаниеЗадания, ВыключитьЗадание)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если РасписаниеЗадания <> Неопределено Тогда
		
		РегламентноеЗадание.Расписание = РасписаниеЗадания;
		РасписаниеЗадания = Неопределено;
		
	КонецЕсли;
	
	Если ВыключитьЗадание Тогда
		
		РегламентноеЗадание.Использование = Ложь;
		ВыключитьЗадание = Ложь;
		
	КонецЕсли;
	
	РегламентноеЗадание.Записать();
	
КонецПроцедуры

// Вспомогательные функции "ОтменитьРегламентноеЗадание"

&НаСервереБезКонтекста
Функция ОтменитьРегламентноеЗаданиеНаСервере(ИдентификаторЗадания)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если РегламентноеЗадание.ПоследнееЗадание = Неопределено
		Или РегламентноеЗадание.ПоследнееЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Задание сейчас не активно.'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентноеЗадание.ПоследнееЗадание.Отменить();
	
	Возврат Истина;
	
КонецФункции

// Элементы

&НаКлиенте
Процедура СостояниеИспользованияРегламентныхЗаданийТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСостояниюРегламентногоЗаданияПриИзменении(Элемент)
	
	ОбновитьСписокРегламентныхЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаименованиюРегламентногоЗаданияПриИзменении(Элемент)
	
	ОбновитьСписокРегламентныхЗаданий(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаименованиюРегламентногоЗаданияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	// В 8.3 работает только через обработчик ожидания.
	ПодключитьОбработчикОжидания("ПриИзмененииОтбораРегламентногоЗаданияПоНаименованию", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоВидуЗаданияПриИзменении(Элемент)
	
	ОбновитьСписокРегламентныхЗаданий(Ложь);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Табличное поле

&НаКлиенте
Процедура ДеревоРегламентныхЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ДеревоРегламентныхЗаданийРасписание Тогда
		
		НастроитьРасписание(Неопределено);
		
	ИначеЕсли Поле = Элементы.ДеревоРегламентныхЗаданийИзбранноеЗадание Тогда
		
		ДобавитьУдалитьРегламентноеЗаданиеИзИзбранного(Неопределено);
		
	ИначеЕсли Поле = Элементы.ДеревоРегламентныхЗаданийСостояние
		Или Поле = Элементы.ДеревоРегламентныхЗаданийНачало
		Или Поле = Элементы.ДеревоРегламентныхЗаданийКонец
		Или Поле = Элементы.ДеревоРегламентныхЗаданийВремяВыполнения Тогда
		
		ОткрытьПоследнееЗадание(Неопределено);
		
	Иначе
		
		РедактироватьРегламентноеЗадание();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегламентныхЗаданийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Событие")
		И ВыбранноеЗначение.Событие = "НастройкаРегламентногоЗадания" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбновитьСписокРегламентныхЗаданий(, ВыбранноеЗначение.ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегламентныхЗаданийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РедактироватьРегламентноеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегламентныхЗаданийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	РедактироватьРегламентноеЗадание(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРегламентныхЗаданийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Ответ = Вопрос("Удалить регламентное задание?", РежимДиалогаВопрос.ДаНет, 60);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УдалитьРегламентноеЗадание(Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные.УникальныйИдентификатор) Тогда
		
		ОбновитьСписокРегламентныхЗаданий();
		
	КонецЕсли;
	
КонецПроцедуры

// Колонки табличного поля

// Вспомогательные функции

&НаСервереБезКонтекста
Функция УдалитьРегламентноеЗадание(ИдентификаторЗадания)
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если РегламентноеЗадание.Предопределенное Тогда
		
		Результат = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нельзя удалить предопределенное задание!'");
		Сообщение.Сообщить();
		
	Иначе
		
		РегламентноеЗадание.Удалить();
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьРегламентноеЗадание(НовоеЗадание = Ложь)
	
	ТекущиеДанные = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные;
	
	Если Не НовоеЗадание
		И Не ЭтоРегламентноеЗадание() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если НовоеЗадание Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			ПараметрыФормы.Вставить("ВидЗадания", ТекущиеДанные.ВидЗадания);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыФормы.Вставить("ИдентификаторЗадания", ТекущиеДанные.УникальныйИдентификатор);
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.РегламентноеЗадание", ПараметрыФормы, Элементы.ДеревоРегламентныхЗаданий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокРегламентныхЗаданий(ОбновлятьТаблицуЗаданий = Истина, ТекущееЗадание = Неопределено)
	
	ТекущиеДанные = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные;
	
	Если ТекущееЗадание = Неопределено
		И ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.УникальныйИдентификатор) Тогда
			
			ТекущееЗадание = ТекущиеДанные.УникальныйИдентификатор;
			
		Иначе
			
			ТекущееЗадание = ТекущиеДанные.ВидЗадания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ОбновитьСписокРегламентныхЗаданийНаСервере(ОбновлятьТаблицуЗаданий, ТекущееЗадание);
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Свойство("ТекущийРодитель") Тогда
			
			Элементы.ДеревоРегламентныхЗаданий.Развернуть(Результат.ТекущийРодитель);
			
		КонецЕсли;
		
		Элементы.ДеревоРегламентныхЗаданий.ТекущаяСтрока = Результат.ТекущаяСтрока;
		
	КонецЕсли;
	
	Если ОтборПоСостояниюРегламентногоЗадания = 1
		Или ОтборПоСостояниюРегламентногоЗадания = 2
		Или ОтборПоСостояниюРегламентногоЗадания = 3
		Или ОтборПоСостояниюРегламентногоЗадания = 4
		Или ЗначениеЗаполнено(ОтборПоНаименованиюРегламентногоЗадания) Тогда
		
		РазвернутьДеревоРегламентныхЗаданий(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСписокРегламентныхЗаданийНаСервере(ОбновлятьТаблицуЗаданий, ТекущееЗадание)
	
	Если ОбновлятьТаблицуЗаданий Тогда
		
		ЗаполнитьТаблицуРегламентныхЗаданий();
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаРегламентныхЗаданий Цикл
		
		ПриведеннаяСтрока = ВРег(СтрокаТаблицы.НаименованиеДляСортировки);
		Позиция = Найти(ПриведеннаяСтрока, ВРег(ОтборПоНаименованиюРегламентногоЗадания));
		СтрокаТаблицы.ПодходитПоНаименованию = (Позиция <> 0);
		
	КонецЦикла;
	
	Результат = ПостроитьДеревоРегламентныхЗаданий(ТекущееЗадание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРегламентныхЗаданий()
	
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	ТаблицаРегламентныхЗаданий.Очистить();
	Элементы.ОтборПоРегламентномуЗаданию.СписокВыбора.Очистить();
	
	Для каждого Задание Из МассивЗаданий Цикл
		
		ВидЗадания = Задание.Метаданные.Имя;
		
		Если ЗначениеЗаполнено(Параметры.ОтборЗаданийПоВидуЗадания)
			И ВидЗадания <> Параметры.ОтборЗаданийПоВидуЗадания Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРегламентныхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задание);
		НоваяСтрока.ВидЗадания = ВидЗадания;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
			
			НоваяСтрока.НаименованиеДляСортировки = НоваяСтрока.Наименование;
			НоваяСтрока.НаименованиеЗадания = НоваяСтрока.Наименование;
			
		Иначе
			
			НоваяСтрока.НаименованиеДляСортировки = Задание.Метаданные.Представление();
			НоваяСтрока.НаименованиеЗадания = "[" + НоваяСтрока.НаименованиеДляСортировки + "]";
			
		КонецЕсли;
		
		Если Задание.Параметры.Количество() > 0 Тогда
			
			НоваяСтрока.ЕстьПараметры = Истина;
			
		КонецЕсли;
		
		ПоследнееЗадание = Задание.ПоследнееЗадание;
		
		Если ПоследнееЗадание <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоследнееЗадание, "Начало, Конец, Состояние");
			НоваяСтрока.Выполнялось = Истина;
			НоваяСтрока.ИдентификаторПоследнегоЗадания = ПоследнееЗадание.УникальныйИдентификатор;
			НоваяСтрока.ВремяВыполнения = Формат(НоваяСтрока.Начало, "ДФ=чч:мм:сс; ДП=' '") + " - " + Формат(НоваяСтрока.Конец, "ДФ=чч:мм:сс; ДП=' '");
			
			Если ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				
				НоваяСтрока.Активно = Истина;
				
			ИначеЕсли ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
				Или ПоследнееЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				
				НоваяСтрока.ЗавершеноСОшибками = Истина;
				
			КонецЕсли;
			
			Если ПоследнееЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				
				НоваяСтрока.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ПоследнееЗадание.ИнформацияОбОшибке);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ОтборПоРегламентномуЗаданию.СписокВыбора.Добавить(Строка(НоваяСтрока.УникальныйИдентификатор), НоваяСтрока.НаименованиеЗадания);
		
	КонецЦикла;
	
	ТаблицаРегламентныхЗаданий.Сортировать("НаименованиеДляСортировки");
	
	// Обновим признак избранного задания,
	// а также удалим из списка избранного задания, которых уже нет.
	ЭлементыКУдалению = Новый Массив;
	
	Для каждого ЭлементСписка Из ИзбранныеЗадания Цикл
		
		ПараметрыОтбора = Новый Структура("УникальныйИдентификатор", ЭлементСписка.Значение);
		НайденныеСтроки = ТаблицаРегламентныхЗаданий.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ЭлементыКУдалению.Добавить(ЭлементСписка);
			
		Иначе
			
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				
				СтрокаТаблицы.ИзбранноеЗадание = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Параметры.ОтборЗаданийПоВидуЗадания) Тогда
		// Удалять можно только в том случае, если получили полный список регламентных заданий.
		
		Для каждого ЭлементСписка Из ЭлементыКУдалению Цикл
			
			ИзбранныеЗадания.Удалить(ЭлементСписка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПостроитьДеревоРегламентныхЗаданий(ТекущееЗадание)
	
	ЭлементыДерева = ДеревоРегламентныхЗаданий.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	КоличествоРегламентныхЗаданий = 0;
	
	ПараметрыОтбора = Новый Структура();
	
	Если ОтборПоСостояниюРегламентногоЗадания = 1 Тогда
		
		ПараметрыОтбора.Вставить("ИзбранноеЗадание", Истина);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 2 Тогда
		
		ПараметрыОтбора.Вставить("Активно", Истина);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 3 Тогда
		
		ПараметрыОтбора.Вставить("Выполнялось", Истина);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 4 Тогда
		
		ПараметрыОтбора.Вставить("ЗавершеноСОшибками", Истина);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 5 Тогда
		
		ПараметрыОтбора.Вставить("Использование", Истина);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 6 Тогда
		
		ПараметрыОтбора.Вставить("Использование", Ложь);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 7 Тогда
		
		ПараметрыОтбора.Вставить("Предопределенное", Истина);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 8 Тогда
		
		ПараметрыОтбора.Вставить("Предопределенное", Ложь);
		
	ИначеЕсли ОтборПоСостояниюРегламентногоЗадания = 9 Тогда
		
		ПараметрыОтбора.Вставить("ЕстьПараметры", Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоНаименованиюРегламентногоЗадания) Тогда
		
		ПараметрыОтбора.Вставить("ПодходитПоНаименованию", Истина);
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если ГруппироватьПоВидуЗадания Тогда
		
		Для каждого ВидЗадания Из ВидыРегламентныхЗаданий Цикл
			
			ПараметрыОтбора.Вставить("ВидЗадания", ВидЗадания.ВидЗадания);
			
			СписокЗаданий = ТаблицаРегламентныхЗаданий.Выгрузить(ПараметрыОтбора);
			СписокЗаданий.Сортировать("НаименованиеДляСортировки");
			
			Если СписокЗаданий.Количество() = 0
				И ОтборПоСостояниюРегламентногоЗадания <> 10 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			НоваяСтрока.Задание		= ВидЗадания.Наименование;
			НоваяСтрока.ВидЗадания	= ВидЗадания.ВидЗадания;
			
			Если НоваяСтрока.ВидЗадания = ТекущееЗадание Тогда
				
				Результат = Новый Структура();
				Результат.Вставить("ТекущаяСтрока", НоваяСтрока.ПолучитьИдентификатор());
				
			КонецЕсли;
			
			ДобавитьРегламентноеЗаданияВДерево(НоваяСтрока, СписокЗаданий, ТекущееЗадание, Результат);
			
		КонецЦикла;
		
	Иначе
		
		СписокЗаданий = ТаблицаРегламентныхЗаданий.Выгрузить(ПараметрыОтбора);
		СписокЗаданий.Сортировать("НаименованиеДляСортировки");
		ДобавитьРегламентноеЗаданияВДерево(ДеревоРегламентныхЗаданий, СписокЗаданий, ТекущееЗадание, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьРегламентноеЗаданияВДерево(СтрокаДляДобавления, СписокЗаданий, ТекущееЗадание, Результат)
	
	КоличествоВключенных	= 0;
	КоличествоВсего			= 0;	
	ЭлементыСтроки			= СтрокаДляДобавления.ПолучитьЭлементы();
	
	Для каждого Задание Из СписокЗаданий Цикл
		
		КоличествоВсего = КоличествоВсего + 1;
		
		НоваяСтрока = ЭлементыСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задание);
		НоваяСтрока.Задание = Задание.НаименованиеЗадания;
		
		Если НоваяСтрока.Использование Тогда
			
			КоличествоВключенных = КоличествоВключенных + 1;
			
		КонецЕсли;
		
		Если НоваяСтрока.УникальныйИдентификатор = ТекущееЗадание Тогда
			
			Результат = Новый Структура();
			Результат.Вставить("ТекущаяСтрока", НоваяСтрока.ПолучитьИдентификатор());
			
			Если ГруппироватьПоВидуЗадания Тогда
				
				Результат.Вставить("ТекущийРодитель", СтрокаДляДобавления.ПолучитьИдентификатор());
				
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоРегламентныхЗаданий = КоличествоРегламентныхЗаданий + 1;
		
	КонецЦикла;
	
	Если ГруппироватьПоВидуЗадания Тогда
		
		СтрокаДляДобавления.Количество = "" + КоличествоВсего;
		
		Если ОтборПоСостояниюРегламентногоЗадания <> 5
			И ОтборПоСостояниюРегламентногоЗадания <> 6 Тогда
			
			СтрокаДляДобавления.Количество = СтрокаДляДобавления.Количество + " (" + КоличествоВключенных + ")";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоРегламентноеЗадание()
	
	ТекущиеДанные = Элементы.ДеревоРегламентныхЗаданий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.УникальныйИдентификатор) Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииОтбораРегламентногоЗаданияПоНаименованию()
	
	ТекущийЭлемент = Элементы.ОтборПоНаименованиюРегламентногоЗадания;
	ТекущийЭлемент.УстановитьГраницыВыделения(1, СтрДлина(ТекущийЭлемент.ТекстРедактирования) + 1);
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ГРУППА "СтраницаФоновыеЗадания"

// Команды

&НаКлиенте
Процедура ОбновитьФоновыеЗадания(Команда)
	
	Если Не РазрешитьПолучениеФоновыхЗаданий() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьФоновыеЗаданияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФоновоеЗадание(Команда)
	
	Если Элементы.ТаблицаФоновыхЗаданий.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтменитьФоновоеЗаданиеНаСервере(Элементы.ТаблицаФоновыхЗаданий.ТекущиеДанные.УникальныйИдентификатор) Тогда
		
		ОбновитьФоновыеЗаданияНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФоновоеЗадание(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаФоновыхЗаданий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеФоновогоЗадания = ШаблонОписанияФоновогоЗадания();
	ЗаполнитьЗначенияСвойств(ОписаниеФоновогоЗадания, ТекущиеДанные);
	ОткрытьОписаниеФоновогоЗадания(ОписаниеФоновогоЗадания, ТекущиеДанные.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиРегламентноеЗадание(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаФоновыхЗаданий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РегламентноеЗадание) Тогда
		
		ОпределитьРегламентноеЗадание(Неопределено);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РегламентноеЗадание) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайтиРегламентноеЗаданиеВСписке(ТекущиеДанные.РегламентноеЗадание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРегламентноеЗадание(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаФоновыхЗаданий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеЗадания = ОписаниеФоновогоЗадания(ТекущиеДанные.УникальныйИдентификатор, Элементы.ОтборПоВидуЗадания.СписокВыбора.Скопировать());
	
	Если ОписаниеЗадания <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ОписаниеЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные функции "ОбновитьФоновыеЗадания"

&НаСервере
Процедура ОбновитьФоновыеЗаданияНаСервере()
	
	ТаблицаФоновыхЗаданий.Очистить();
	ПараметрыОтбора = Новый Структура;
	
	// ОТБОР ПО СОСТОЯНИЮ
	ДопустимыеСостояния = Новый Массив;
	
	Если ОтборПоСостояниюФоновогоЗаданияАктивно Тогда
		
		ДопустимыеСостояния.Добавить(СостояниеФоновогоЗадания.Активно);
		
	КонецЕсли;
	
	Если ОтборПоСостояниюФоновогоЗаданияЗавершено Тогда
		
		ДопустимыеСостояния.Добавить(СостояниеФоновогоЗадания.Завершено);
		
	КонецЕсли;
	
	Если ОтборПоСостояниюФоновогоЗаданияЗавершеноАварийно Тогда
		
		ДопустимыеСостояния.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
		
	КонецЕсли;
	
	Если ОтборПоСостояниюФоновогоЗаданияОтменено Тогда
		
		ДопустимыеСостояния.Добавить(СостояниеФоновогоЗадания.Отменено);
		
	КонецЕсли;
	
	Если ДопустимыеСостояния.Количество() = 0 Тогда
		
		Возврат;
		
	ИначеЕсли ДопустимыеСостояния.Количество() <> 4 Тогда
		
		ПараметрыОтбора.Вставить("Состояние", ДопустимыеСостояния);
		
	КонецЕсли;
	
	// ОТБОР ПО ПЕРИОДУ
	Если ВидОтбораПоПериоду <> "ВсеВремя" Тогда
		
		Если ВидОтбораПоПериоду <> ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
			
			ОтборПоПериоду.Вариант = ВидОтбораПоПериоду;
			
			ОтборПоПериодуДатаНачала	= ОтборПоПериоду.ДатаНачала;
			ОтборПоПериодуДатаОкончания	= ОтборПоПериоду.ДатаОкончания;
			
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("Начало"	, ОтборПоПериодуДатаНачала);
		ПараметрыОтбора.Вставить("Конец"	, ОтборПоПериодуДатаОкончания);
		
	КонецЕсли;
	
	// ОТБОР ПО РЕГЛАМЕНТНОМУ ЗАДАНИЮ
	Если ОтбиратьПоРегламентномуЗаданию Тогда
		
		Если ЗначениеЗаполнено(ОтборПоРегламентномуЗаданию) Тогда
			
			ИдентификаторЗадания = Новый УникальныйИдентификатор(ОтборПоРегламентномуЗаданию);
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			
		Иначе
			
			РегламентноеЗадание = Неопределено;
			
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("РегламентноеЗадание", РегламентноеЗадание);
		
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ТАБЛИЦЫ ЗАДАНИЙ
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
	
	Если ОтбиратьПоРегламентномуЗаданию
		И ЗначениеЗаполнено(ОтборПоРегламентномуЗаданию) Тогда
		
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ОтборПоРегламентномуЗаданию);
		РегламентноеЗаданиеПоОтбору = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
	Иначе
		
		РегламентноеЗаданиеПоОтбору = Неопределено;
		
	КонецЕсли;
	
	Для каждого Задание Из МассивЗаданий Цикл
		
		Если ВидОтбораПоПериоду <> "ВсеВремя"
			И Задание.Состояние = СостояниеФоновогоЗадания.Активно
			И Задание.Начало > ОтборПоПериодуДатаОкончания Тогда
			// Почему-то активные задания в выборку попадают всегда, независимо от отбора по периоду.
			// Откинем такие задания вручную.
			
			Продолжить;
			
		КонецЕсли;
		
		// Почему-то очень медленно отрабатывает любое обращение к регламентному заданию фонового задания (конструкция Задание.РегламентноеЗадание),
		// причём медленно отрабатывает каждое обращение (нет никакого кэширования даже в рамках фонового задания).
		// Но если реквизит "РегламентноеЗадание" присвоить какой-то переменной, то потом обращаться к нему можно сколько угодно раз
		// без деградации производительности (при этом основное время затрачивается на само присвоение).
		Если АнализироватьРегламентныеЗадания Тогда
			
			Если РегламентноеЗаданиеПоОтбору = Неопределено Тогда
				
				РегламентноеЗадание = Задание.РегламентноеЗадание;
				
			Иначе
				// Немного ускорим поиск, если указан отбор по регламентному заданию.
				
				РегламентноеЗадание = РегламентноеЗаданиеПоОтбору;
				
			КонецЕсли;
			
			// Отбор по виду задания.
			Если ОтбиратьПоВидуЗадания Тогда
				
				Если РегламентноеЗадание = Неопределено Тогда
					
					ВидЗадания = "";
					
				Иначе
					
					ВидЗадания = РегламентноеЗадание.Метаданные.Имя;
					
				КонецЕсли;
				
				Если ВидЗадания <> ОтборПоВидуЗадания Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Возмжно, задан отбор по регламентному заданию.
			
			РегламентноеЗадание = РегламентноеЗаданиеПоОтбору;
			
		КонецЕсли;
		
		ОписаниеЗадания = ОписаниеФоновогоЗадания(Задание, Элементы.ОтборПоВидуЗадания.СписокВыбора.Скопировать(), РегламентноеЗадание);
		НоваяСтрока = ТаблицаФоновыхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЗадания);
		
	КонецЦикла;
	
	ТаблицаФоновыхЗаданий.Сортировать("Начало Убыв, ДатаОкончанияУказана, Конец Убыв");
	
	КоличествоФоновыхЗаданий = ТаблицаФоновыхЗаданий.Количество();
	
КонецПроцедуры

// Вспомогательные функции "ОтменитьФоновоеЗадание"

&НаСервереБезКонтекста
Функция ОтменитьФоновоеЗаданиеНаСервере(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Задание сейчас не активно.'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ФоновоеЗадание.Отменить();
	
	Возврат Истина;
	
КонецФункции

// Вспомогательные функции "НайтиРегламентноеЗадание"

&НаКлиенте
Процедура НайтиРегламентноеЗаданиеВСписке(ИдентификаторЗадания)
	
	СтрокиДерева = ДеревоРегламентныхЗаданий.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.УникальныйИдентификатор = ИдентификаторЗадания Тогда
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			Элементы.ДеревоРегламентныхЗаданий.ТекущаяСтрока = ИдентификаторСтроки;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРегламентныеЗадания;
			
			Прервать;
			
		КонецЕсли;
		
		ПодстрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		
		Для каждого ПодстрокаДерева Из ПодстрокиДерева Цикл
			
			Если ПодстрокаДерева.УникальныйИдентификатор = ИдентификаторЗадания Тогда
				
				ИдентификаторСтроки = ПодстрокаДерева.ПолучитьИдентификатор();
				Элементы.ДеревоРегламентныхЗаданий.ТекущаяСтрока = ИдентификаторСтроки;
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРегламентныеЗадания;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Элементы

&НаКлиенте
Процедура ВидОтбораПоПериодуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтбораПоПериодуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВидОтбораПоПериоду = "ВсеВремя";
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоРегламентномуЗаданиюПриИзменении(Элемент)
	
	ОтбиратьПоРегламентномуЗаданию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоРегламентномуЗаданиюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущееЗадание"		, ОтборПоРегламентномуЗаданию);
	ПараметрыФормы.Вставить("ВариантОтбора"			, "РегламентноеЗадание");
	ПараметрыФормы.Вставить("АдресТаблицыЗаданий"	, ПоместитьТаблицуЗаданийВоВременноеХранилище("ТаблицаРегламентныхЗаданий"));
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.ВыборЗадания", ПараметрыФормы, Элементы.ОтборПоРегламентномуЗаданию);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоРегламентномуЗаданиюНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуЗаданияПриИзменении(Элемент)
	
	ОтбиратьПоВидуЗадания = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуЗаданияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущееЗадание"		, ОтборПоВидуЗадания);
	ПараметрыФормы.Вставить("ВариантОтбора"			, "ВидЗадания");
	ПараметрыФормы.Вставить("АдресТаблицыЗаданий"	, ПоместитьТаблицуЗаданийВоВременноеХранилище("ВидыРегламентныхЗаданий"));
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.ВыборЗадания", ПараметрыФормы, Элементы.ОтборПоВидуЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуЗаданияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура АнализироватьРегламентныеЗаданияПриИзменении(Элемент)
	
	Если Не АнализироватьРегламентныеЗадания Тогда
		
		ОтбиратьПоВидуЗадания = Ложь;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

// Табличное поле

&НаКлиенте
Процедура ТаблицаФоновыхЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФоновоеЗадание(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФоновыхЗаданийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФоновоеЗадание(Неопределено);
	
КонецПроцедуры

// Колонки табличного поля

// Вспомогательные функции

&НаСервереБезКонтекста
Функция ОписаниеФоновогоЗадания(ЗаданиеИлиИдентификатор, СписокВидовЗаданий, РегламентноеЗаданиеЗначение = Неопределено)
	
	ОписаниеФоновогоЗадания = ШаблонОписанияФоновогоЗадания();
	
	Если ТипЗнч(ЗаданиеИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		
		ПараметрыОтбора = Новый Структура("УникальныйИдентификатор", ЗаданиеИлиИдентификатор);
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
		
		Если МассивЗаданий.Количество() = 0 Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			Задание = МассивЗаданий[0];
			РегламентноеЗадание = Задание.РегламентноеЗадание;
			
		КонецЕсли;
		
	Иначе
		
		Задание = ЗаданиеИлиИдентификатор;
		РегламентноеЗадание = РегламентноеЗаданиеЗначение;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОписаниеФоновогоЗадания, Задание, , "РегламентноеЗадание");
	ОписаниеФоновогоЗадания.Состояние = Строка(ОписаниеФоновогоЗадания.Состояние);
	
	Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
		
		ОписаниеФоновогоЗадания.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		
		ОписаниеФоновогоЗадания.РегламентноеЗадание					= РегламентноеЗадание.УникальныйИдентификатор;
		ОписаниеФоновогоЗадания.ВидЗадания							= РегламентноеЗадание.Метаданные.Имя;
		ОписаниеФоновогоЗадания.РегламентноеЗаданиеПредставление	= РегламентноеЗадание.Наименование;
		
		ЭлементСписка = СписокВидовЗаданий.НайтиПоЗначению(ОписаниеФоновогоЗадания.ВидЗадания);
		ОписаниеФоновогоЗадания.ВидЗадания = ЭлементСписка.Представление;
		
		Если Не ЗначениеЗаполнено(ОписаниеФоновогоЗадания.РегламентноеЗаданиеПредставление) Тогда
			
			ОписаниеФоновогоЗадания.РегламентноеЗаданиеПредставление = "[" + РегламентноеЗадание.Метаданные.Представление() + "]";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписаниеФоновогоЗадания.Наименование) Тогда
			
			ОписаниеФоновогоЗадания.Наименование = ОписаниеФоновогоЗадания.РегламентноеЗаданиеПредставление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеФоновогоЗадания.Конец) Тогда
		
		ОписаниеФоновогоЗадания.ДатаОкончанияУказана = Истина;
		
	КонецЕсли;
	
	Возврат ОписаниеФоновогоЗадания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонОписанияФоновогоЗадания()
	
	Возврат Новый Структура("ВидЗадания, ИмяМетода, ИнформацияОбОшибке, Ключ, Конец, Наименование, Начало, Расположение, РегламентноеЗаданиеПредставление, Состояние, УникальныйИдентификатор, РегламентноеЗадание, ДатаОкончанияУказана");
	
КонецФункции

&НаСервере
Функция ПоместитьТаблицуЗаданийВоВременноеХранилище(ИмяТаблицы)
	
	Если ИмяТаблицы = "ТаблицаРегламентныхЗаданий" Тогда
		
		ТаблицаЗаданий = ТаблицаРегламентныхЗаданий.Выгрузить(, "НаименованиеЗадания, ВидЗадания, УникальныйИдентификатор");
		ТаблицаЗаданий.Колонки.НаименованиеЗадания.Имя = "Наименование";
		ТаблицаЗаданий.Колонки.Добавить("ИдентификаторЗадания");
		
		Для каждого ЗаданиеСтрока Из ТаблицаЗаданий Цикл
			
			ЗаданиеСтрока.ИдентификаторЗадания = Строка(ЗаданиеСтрока.УникальныйИдентификатор);
			
			ЭлементСписка = Элементы.ОтборПоВидуЗадания.СписокВыбора.НайтиПоЗначению(ЗаданиеСтрока.ВидЗадания);
			ЗаданиеСтрока.ВидЗадания = ЭлементСписка.Представление;
			
		КонецЦикла;
		
		ТаблицаЗаданий.Колонки.Удалить("УникальныйИдентификатор");
		
	Иначе
		
		ТаблицаЗаданий = ВидыРегламентныхЗаданий.Выгрузить(, "Наименование, ВидЗадания");
		
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаЗаданий);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОписаниеФоновогоЗадания(ОписаниеЗадания, ИдентификаторЗадания)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИдентификаторЗадания"	, ИдентификаторЗадания);
	ПараметрыФормы.Вставить("ОписаниеЗадания"		, ОписаниеЗадания);
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.ФоновоеЗадание", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция РазрешитьПолучениеФоновыхЗаданий()
	
	Если ОтключитьПредупрежденияОВозможномЗамедлении
		Или ОтбиратьПоРегламентномуЗаданию
		Или Не АнализироватьРегламентныеЗадания
		Или Не ОтборПоСостояниюФоновогоЗаданияЗавершено Тогда
		// В этих случаях количество заданий будет небольшое и всё отработает быстро.
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Анализ регламентных заданий может занять продолжительное время (подробнее см. в справке). Продолжить?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервере
Функция ИнформационнаяБазаФайловая()
			
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	
	Если Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1 Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Контекст)
	
	Элементы = Контекст.Элементы;
	
	Элементы.ГруппаПериод.Видимость = (Контекст.ВидОтбораПоПериоду = ВариантСтандартногоПериода.ПроизвольныйПериод);
	Элементы.ГруппаОтборПоВидуЗадания.ТолькоПросмотр = Не Контекст.АнализироватьРегламентныеЗадания;
	
	Элементы.ВключитьВыключитьИспользованиеРегламентныхЗаданий.Видимость = (Контекст.СостояниеИспользованияРегламентныхЗаданий <> 0);
	
	Если Контекст.СостояниеИспользованияРегламентныхЗаданий = 0 Тогда
		
		Контекст.СостояниеИспользованияРегламентныхЗаданийТекст = НСтр("ru = 'Неопределено'");
		
	ИначеЕсли Контекст.СостояниеИспользованияРегламентныхЗаданий = 1 Тогда
		
		Контекст.СостояниеИспользованияРегламентныхЗаданийТекст = НСтр("ru = 'Включены'");
		Элементы.ВключитьВыключитьИспользованиеРегламентныхЗаданий.Заголовок = НСтр("ru = 'Выключить'");
		
	Иначе
		
		Контекст.СостояниеИспользованияРегламентныхЗаданийТекст = НСтр("ru = 'Выключены'");
		Элементы.ВключитьВыключитьИспользованиеРегламентныхЗаданий.Заголовок = НСтр("ru = 'Включить'");
		
	КонецЕсли;
	
	Элементы.ДеревоРегламентныхЗаданийРазвернутьДеревоРегламентныхЗаданий.Видимость = Контекст.ГруппироватьПоВидуЗадания;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВЗАИМОДЕЙСТВИЕ С КЛАСТЕРОМ СЕРВЕРОВ

// Возвращает текущее состояние блокировки регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрирования - Структура, параметры администрирования информационной базы,
//
// Возвращаемое значение: Булево.
//
&НаКлиентеНаСервереБезКонтекста
Функция СостояниеБлокировкиРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования)
	
	ПараметрыИнформационнойБазы = ПараметрыИнформационнойБазы(ПараметрыАдминистрирования);
	
	Возврат ПараметрыИнформационнойБазы.ИнформационнаяБаза.ScheduledJobsDenied;
	
КонецФункции

// Устанавливает новое состояние блокировки регламентных заданий для информационной базы.
//
// Параметры:
//  ПараметрыАдминистрирования - Структура, параметры администрирования информационной базы,
//  НовоеЗначение - Булево, новое значение блокировки регламентных заданий информационной базы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыАдминистрирования, НовоеЗначение)
	
	ПараметрыИнформационнойБазы = ПараметрыИнформационнойБазы(ПараметрыАдминистрирования);
	
	ПараметрыИнформационнойБазы.ИнформационнаяБаза.ScheduledJobsDenied = НовоеЗначение;
	ПараметрыИнформационнойБазы.СоединениеСРабочимПроцессом.UpdateInfoBase(ПараметрыИнформационнойБазы.ИнформационнаяБаза);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыИнформационнойБазы(ПараметрыАдминистрирования)
	
	COMСоединитель				= COMСоединитель(ПараметрыАдминистрирования);
	СоединениеСАгентомСервера	= СоединениеСАгентомСервера(ПараметрыАдминистрирования, COMСоединитель);
	Кластер						= ПолучитьКластер(ПараметрыАдминистрирования, СоединениеСАгентомСервера);
	СоединениеСРабочимПроцессом	= СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);
	ИнформационнаяБаза			= ПолучитьИБ(ПараметрыАдминистрирования, СоединениеСРабочимПроцессом, Кластер);
		
	Результат = Новый Структура;
	Результат.Вставить("СоединениеСРабочимПроцессом", СоединениеСРабочимПроцессом);
	Результат.Вставить("ИнформационнаяБаза"			, ИнформационнаяБаза);
	
	Возврат Результат;
	
КонецФункции

// Создает COM-объект V8*.ComConnector.
// Параметры:
//  ПараметрыАдминистрирования - Структура, параметры администрирования информационной базы,
//
// Возвращаемое значение: COMОбъект.
//
&НаКлиентеНаСервереБезКонтекста
Функция COMСоединитель(ПараметрыАдминистрирования)
	
	Возврат Новый COMОбъект(ПараметрыАдминистрирования.ИмяCOMСоединителя);
	
КонецФункции

// Устанавливает соединение с агентом сервера.
//
// Параметры:
//  ПараметрыАдминистрирования - Структура, параметры администрирования информационной базы,
//  COMСоединитель - COMОбъект V8*.ComConnector,
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IV8AgentConnection.
//
&НаКлиентеНаСервереБезКонтекста
Функция СоединениеСАгентомСервера(ПараметрыАдминистрирования, COMСоединитель)
	
	СтрокаСоединенияСАгентомСервера = "tcp://" + ПараметрыАдминистрирования.АдресАгентаСервера + ":" + Формат(ПараметрыАдминистрирования.ПортАгентаСервера, "ЧГ=0");
	СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
	
	Возврат СоединениеСАгентомСервера;
	
КонецФункции

// Возвращает кластер серверов.
//
// Параметры:
//  ПараметрыАдминистрирования - Структура, параметры администрирования информационной базы,
//  СоединениеСАгентомСервера - COMОбъект, реализующий интерфейс IV8AgentConnection,
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IClusterInfo.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКластер(ПараметрыАдминистрирования, СоединениеСАгентомСервера)
	
	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
		
		Если Кластер.MainPort = ПараметрыАдминистрирования.ПортМенеджераКластера Тогда
			
			СоединениеСАгентомСервера.Authenticate(Кластер, ПараметрыАдминистрирования.ИмяАдминистратораКластера, ПараметрыАдминистрирования.ПарольАдминистратораКластера);
			
			Возврат Кластер;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'На рабочем сервере не найден кластер'");
	
КонецФункции

// Устанавливает соединение с рабочим процессом.
//
// Параметры:
//  COMСоединитель - COMОбъект V8*.ComConnector,
//  СоединениеСАгентомСервера - COMОбъект, реализующий интерфейс IV8AgentConnection,
//  Кластер - COMОбъект, реализующий интерфейс IClusterInfo.
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IV8ServerConnection.
//
&НаКлиентеНаСервереБезКонтекста
Функция СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер)
	
	Для Каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		
		Если РабочийПроцесс.Running И РабочийПроцесс.IsEnable  Тогда
			
			СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
			Возврат COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'В кластере серверов не найдено активных рабочих процессов.'");
	
КонецФункции

// Возвращает информационную базу.
//
// Параметры:
//  ПараметрыАдминистрирования - Структура, параметры администрирования информационной базы,
//  СоединениеСРабочимПроцессом - COMОбъект, реализующий интерфейс IV8ServerConnection,
//  Кластер - COMОбъект, реализующий интерфейс IClusterInfo,
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IInfoBaseInfo.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИБ(ПараметрыАдминистрирования, СоединениеСРабочимПроцессом, Кластер)
	
	СоединениеСРабочимПроцессом.AddAuthentication(ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы, ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы);
	
	Для Каждого ИнформационнаяБаза Из СоединениеСРабочимПроцессом.GetInfoBases() Цикл
		
		Если ИнформационнаяБаза.Name = ПараметрыАдминистрирования.ИмяИнформационнойБазы Тогда
			
			Если Не ЗначениеЗаполнено(ИнформационнаяБаза.DBMS) Тогда
				
				ВызватьИсключение НСтр("ru = 'Неправильные имя и пароль администратора информационной базы в кластере серверов.'");
				
			КонецЕсли;
			
			Возврат ИнформационнаяБаза;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение НСтр("ru = 'В кластере серверов не найдена информационная база!'");
	
КонецФункции
