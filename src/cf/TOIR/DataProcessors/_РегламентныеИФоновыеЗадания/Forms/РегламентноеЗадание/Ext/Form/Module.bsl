
//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяМетаданных = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = Лев(СистемнаяИнформация.ВерсияПриложения, 3);
	
	Если ВерсияПлатформы = "8.3"
		Или ВерсияПлатформы = "8.4" Тогда
		
		Попытка
			
			Элементы.ИмяПользователя.КнопкаВыпадающегоСписка = Ложь;
			
		Исключение
		    
		КонецПопытки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "ЗапретитьИзменениеПараметров, МодальныйРежимОткрытия, ОграниченныйРежим");
	
	// УСТАНОВИМ ВИДИМОСТЬ И ДОСТУПНОСТЬ В ЗАВИСИМОСТИ ОТ ПАРАМЕТРОВ РЕДАКТИРОВАНИЯ
	Элементы.ГруппаПараметры.ТолькоПросмотр = Параметры.ЗапретитьИзменениеПараметров;
	
	// ЗАПОЛНИМ СПИСОК ВИДОВ ЗАДАНИЙ И ПОЛЬЗОВАТЕЛЕЙ
	Для каждого МетаданныеЗадание Из Метаданные.РегламентныеЗадания Цикл
		
		Элементы.ВидЗадания.СписокВыбора.Добавить(МетаданныеЗадание.Имя, МетаданныеЗадание.Представление());
		
	КонецЦикла;
	
	Элементы.ВидЗадания.СписокВыбора.СортироватьПоПредставлению();

	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого Пользователь Из ПользователиИБ Цикл
		
		Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя, Пользователь.Имя);
		
	КонецЦикла;
	
	// НАЙДЁМ ЗАДАНИЕ, ЕСЛИ ОНО УЖЕ ЕСТЬ
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Параметры.ИдентификаторЗадания);
	
	Если Задание = Неопределено Тогда
		
		Если Параметры.ОграниченныйРежим
			И ПустаяСтрока(Параметры.ВидЗадания) Тогда
			// Такого быть не должно.
			
			Возврат;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Параметры.ВидЗадания) Тогда
			
			ВидЗадания = Параметры.ВидЗадания;
			ЗаданиеМетаданные = Метаданные.РегламентныеЗадания[ВидЗадания];
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗаданиеМетаданные, , "Предопределенное");
			Наименование = ЗаданиеМетаданные.Синоним;
			
		КонецЕсли;
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		
		Заголовок = НСтр("ru = 'Создание нового регламентного задания'");
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Задание);
		ИдентификаторЗадания		= Задание.УникальныйИдентификатор;
		ИдентификаторЗаданияСтрока	= Строка(ИдентификаторЗадания);
		ВидЗадания					= Задание.Метаданные.Имя;
		
		Элементы.ВидЗадания.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	// Если настройки задания передаются непосредственно в форму редактирования,
	// то они имеют приоритет.
	// Передаваться могут ключ, наименование и параметры.
	Если Параметры.Ключ <> Неопределено Тогда
		
		Ключ = Параметры.Ключ;
		
	КонецЕсли;
	
	Если Параметры.Наименование <> Неопределено Тогда
		
		Наименование = Параметры.Наименование;
		
	КонецЕсли;
	
	ИсточникПараметров = Неопределено;
	
	Если Параметры.ПараметрыЗадания = Неопределено Тогда
		
		Если Задание <> Неопределено Тогда
			
			ИсточникПараметров = Задание.Параметры;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Параметры.ПараметрыЗадания) = Тип("Массив") Тогда
			
			ИсточникПараметров = Параметры.ПараметрыЗадания;
			
		Иначе // Адрес в хранилище.
			
			ИсточникПараметров = ПолучитьИзВременногоХранилища(Параметры.ПараметрыЗадания);
			
		КонецЕсли;
		
		АдресПараметров = ПоместитьВоВременноеХранилище(ИсточникПараметров, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ИсточникПараметров <> Неопределено Тогда
		
		Для каждого Параметр Из ИсточникПараметров Цикл
			
			НоваяСтрока = ПараметрыЗадания.Добавить();
			НоваяСтрока.Значение = Параметр;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Параметры задания были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена, 60);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			
			Отказ = Истина;
			СохранитьИзменения(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНастройкиРегламентногоЗадания();
	
	Если МодальныйРежимОткрытия Тогда
		
		Закрыть(ИдентификаторЗадания);
		
	Иначе
		
		Результат = Новый Структура("Событие, ИдентификаторЗадания", "НастройкаРегламентногоЗадания", ИдентификаторЗадания);
		ОповеститьОВыборе(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ДиалогНастройки = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	Если ДиалогНастройки.ОткрытьМодально() Тогда
		
		Расписание = ДиалогНастройки.Расписание;
		Модифицированность = Истина;
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьУникальныйКлюч(Команда)
	
	Ключ = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВыполнения(Команда)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЗаданияДляИстории", ИдентификаторЗадания);
	ПараметрыФормы.Вставить("ИмяЗаданияДляИстории"			, Наименование);
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы.ИмяЗаданияДляИстории) Тогда
		
		ПараметрыФормы.ИмяЗаданияДляИстории = Элементы.ВидЗадания.СписокВыбора.НайтиПоЗначению(ВидЗадания).Представление;
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежим(Команда)
	
	ОграниченныйРежим = Ложь;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВСписке(Команда)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяМетаданных + ".Форма.Форма", , ЭтаФорма);
	Оповестить("ПоискРегламентногоЗаданияВСписке", ИдентификаторЗадания, ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

// вспомогательные функции "СохранитьИзменения"

&НаСервере
Процедура СохранитьНастройкиРегламентногоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания)
		И Не Модифицированность Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
	Иначе
		
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(ВидЗадания);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Задание, ЭтаФорма, , "Предопределенное");
	
	Если Не ЗапретитьИзменениеПараметров Тогда
		
		ИсточникПараметров = Новый Массив;
		
		Для каждого Параметр Из ПараметрыЗадания Цикл
			
			ИсточникПараметров.Добавить(Параметр.Значение);
			
		КонецЦикла;
		
	ИначеЕсли Не ПустаяСтрока(АдресПараметров) Тогда
		
		ИсточникПараметров = ПолучитьИзВременногоХранилища(АдресПараметров);
		
	Иначе
		
		ИсточникПараметров = Неопределено;
		
	КонецЕсли;
	
	Если ИсточникПараметров <> Неопределено Тогда
		
		Задание.Параметры = ИсточникПараметров;
		
	КонецЕсли;
	
	Задание.Записать();
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	Модифицированность = Ложь;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВидЗаданияПриИзменении(Элемент)
	
	Наименование = Элементы.ВидЗадания.СписокВыбора.НайтиПоЗначению(ВидЗадания).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗапретитьИзменениеПараметров Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(Элементы.ПараметрыЗадания.ТекущиеДанные.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТекущийПользователь", ИмяПользователя);
	ОткрытьФорму(ИмяМетаданных + ".Форма.ВыборПользователя", ПараметрыФормы, Элементы.ИмяПользователя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Контекст)
	
	Элементы = Контекст.Элементы;
	
	Элементы.ГруппаХарактеристики.Видимость	= Не Контекст.ОграниченныйРежим;
	Элементы.ГруппаПараметры.Видимость		= Не Контекст.ОграниченныйРежим;
	Элементы.ГруппаКлюч.Видимость			= Не Контекст.ОграниченныйРежим;
	
	Надпись = Элементы.НастроитьРасписание;
	Надпись.Заголовок = Строка(Контекст.Расписание);
	
	Если СтрДлина(Надпись.Заголовок) > 50 Тогда
		
		Надпись.Заголовок = Лев(Надпись.Заголовок, 47) + "...";
		
	КонецЕсли;
	
КонецПроцедуры
