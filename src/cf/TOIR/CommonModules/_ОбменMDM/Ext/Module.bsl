#Область ПоключениеКомпоненты   

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("ВнешняяКомпонентаRMQ"));
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

Функция ПолучитьКомпонентуСервер()Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПроверитьПодключениеКлиентСервер(КлиентКомпоненты)
	
	Попытка  
	СохДанные=Константы._НастройкиОбменаRMQ.Получить().Получить();
		КлиентКомпоненты.Connect(
				СохДанные.Адрес,
				СохДанные.Порт,
				СохДанные.Логин,
				СохДанные.Пароль,
				СохДанные.ВиртуальныйХост);
			Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
	
КонецПроцедуры

Процедура ПроверитьПодключениеСервер()
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты);
	
КонецПроцедуры

#КонецОбласти  

#Область СинхронизацииДокументовЗаявка_в_НСИ
Процедура _Обмен() Экспорт  	

//Подключаем компонент	
КлиентКомпоненты = ПолучитьКомпонентуСервер();    
//Получаем настройки для обмена
СохДанные=Константы._НастройкиОбменаRMQ.Получить().Получить();


//Отправка заявок в систему MDM
Запрос= новый Запрос;
Запрос.Текст=
  "ВЫБРАТЬ
  |	_ЗаявкиВСлужбуНСИ.Заявка КАК Заявка
  |ИЗ
  |	РегистрСведений._ЗаявкиВСлужбуНСИ КАК _ЗаявкиВСлужбуНСИ
  |ГДЕ
  |	_ЗаявкиВСлужбуНСИ.Заявка.СтатусЗаявки = Значение(Перечисление._СтатусыЗаявокВСлужбуНСИ.Новая)"; 
Результат=Запрос.Выполнить();
Если НЕ Результат.Пустой() тогда 
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() цикл    
		 Попытка	
			Сериализатор= новый СериализаторXDTO(ФабрикаXDTO);
			Запись=новый ЗаписьJSON; 
			Запись.УстановитьСтроку();
			ИсхДанные=Выборка.Заявка;
			Сериализатор.ЗаписатьJSON(Запись,ИсхДанные.ПолучитьОбъект(),НазначениеТипаXML.Явное);
			ТекстСообщения=Запись.Закрыть();
			ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ТекстСообщения,СохДанные.ТочкаОбменаДок,СохДанные.ИмяОчередиДокВых,СохДанные.КлючМаршрутизацииДок);
            Док=Выборка.Заявка.ПолучитьОбъект();
			Док.СтатусЗаявки=Перечисления._СтатусыЗаявокВСлужбуНСИ.ВРаботе;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		  Исключение   
			ЗаписьжурналаРегистрации("Обмен: Заявки в НСИ",УровеньЖурналаРегистрации.Ошибка,,"Не удалось отправить заявку;"+Выборка.Заявка+" по причине "+ОписаниеОшибки());
		  КонецПопытки;	
		КонецЦикла;	
КонецЕсли;
// Прием заявок из Системы MDM
 
	Попытка
				КлиентКомпоненты.Connect(
				СохДанные.Адрес,
				СохДанные.Порт,
				СохДанные.Логин,
				СохДанные.Пароль,
				СохДанные.ВиртуальныйХост);
	//   КлиентКомпоненты.Connect("localhost",5672,"guest","guest","/");

		ИмяОчереди = СохДанные.ИмяОчередиДокВх;
		
		Попытка
					
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				ОтветноеСообщение = ОтветноеСообщение;  
				ЧтениеJSON = Новый ЧтениеJSON;   
				ЧтениеJSON.УстановитьСтроку(ОтветноеСообщение);
	            ЗначениеОбъект = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	            ЧтениеJSON.Закрыть();
	            ЗначениеОбъект.ОбменДанными.Загрузка = Истина;
	            ЗначениеОбъект.Записать();
		       	ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Очередь пустая!'");
			КонецЕсли;
			Сообщить(ТекстСообщения);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;


КонецПроцедуры
Процедура ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ТекстСообщения,ТочкаОбменаВх, ИмяОчередиВх, Ключ)
	
	Попытка
		СохДанные=Константы._НастройкиОбменаRMQ.Получить().Получить();
		КлиентКомпоненты.Connect(
				СохДанные.Адрес,
				СохДанные.Порт,
				СохДанные.Логин,
				СохДанные.Пароль,
				СохДанные.ВиртуальныйХост);
		
		ТочкаОбмена    = ТочкаОбменаВх;
		ИмяОчереди     = ИмяОчередиВх;
		ТекстСообщения = ТекстСообщения;
		КлючМаршрутизации = Ключ;
		
		КлиентКомпоненты.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Сообщение успешно отправлено!");
КонецПроцедуры
#КонецОбласти 


#Область СинхронизацииСправочникаНоменклатура

Процедура _СинхронизацияНоменклатуры() Экспорт
	КлиентКомпоненты = ПолучитьКомпонентуСервер(); 
    ПрочитатьСообщение(КлиентКомпоненты);
КонецПроцедуры 

Процедура ПрочитатьСообщение(КлиентКомпоненты)   
	
	СохДанные=Константы._НастройкиОбменаRMQ.Получить().Получить();

	Попытка
				КлиентКомпоненты.Connect(
				СохДанные.Адрес,
				СохДанные.Порт,
				СохДанные.Логин,
				СохДанные.Пароль,
				СохДанные.ВиртуальныйХост);
	//   КлиентКомпоненты.Connect("localhost",5672,"guest","guest","/");

		ИмяОчереди = СохДанные.ИмяОчередиНоменклатура;
		
		Попытка
					
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				ОтветноеСообщение = ОтветноеСообщение;  
				ЧтениеJSON = Новый ЧтениеJSON;   
				ЧтениеJSON.УстановитьСтроку(ОтветноеСообщение);
                ЗначениеОбъект = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
                ЧтениеJSON.Закрыть();
				ЗначениеОбъект.ОбменДанными.Загрузка = Истина;
                ЗначениеОбъект.Записать();
		       	ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Очередь пустая!'");
			КонецЕсли;
			Сообщить(ТекстСообщения);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

КонецПроцедуры	

#КонецОбласти 
